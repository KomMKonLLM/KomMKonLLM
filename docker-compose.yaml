services:
  data_store:
    build: ./ResultStore
    container_name: store
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PW: postgres
      DB_NAME: ai_testing
      DB_PORT: 5432
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:8888:8888"

  postgres:
    container_name: db
    image: postgres:14.1-alpine
    restart: always # TODO Does not automatically init database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ai_testing
    healthcheck:
      test: pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 10s
      start_period: 15s
      interval: 5s
      retries: 10
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./ResultStore/persistence/db_scripts/create2.sql:/docker-entrypoint-initdb.d/create_tables.sql

  meta_runner:
    build: ./meta-runner
    environment:
      EXECUTOR_HOST: executor
      EXECUTOR_PORT: 4200
      STORAGE_HOST: store
      STORAGE_PORT: 8080
      CONTINUE_RUN: "false"
      EXECUTION_NOTE: "ollama-mistral-t2"
      MODEL_UNDER_TEST: "OLLAMA"
      STRENGTH: 2
      USE_POSTFIX: "true"
      USE_PREFIX: "false"
      PROMPT_POSTFIX: "? Return a JSON boolean."
      #CA_GENERATOR: "CAGEN"
      #CA_GENERATOR_PATH: "./src/payload_generator/fipo-cli"
      CA_GENERATOR: "PICT"
      CA_GENERATOR_PATH: "./src/payload_generator/pict"
    depends_on:
      ollama:
        condition: service_healthy
        restart: true
      data_store:
        condition: service_started
        restart: true
    volumes:
      - ./public_questions.jsonl:/app/train.jsonl

  executor:
    container_name: executor
    build: ./pyann-model-executor
    depends_on:
      ollama:
        condition: service_healthy
        restart: true
    environment:
      MODEL_IP: "ollama:11434"
      LOG_LEVEL: "DEBUG"
      OLLAMA_MODEL: "mistral"


  ollama:
    container_name: ollama
    image: ollama/ollama
    healthcheck:
      test: pgrep ollama
      timeout: 10s
      start_period: 30s
      interval: 5s
      retries: 5
    ports:
      - "127.0.0.1:11434:11434"
    volumes:
      - ollama:/root/.ollama

volumes:
  ollama: {}
